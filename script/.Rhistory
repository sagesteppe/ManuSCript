left_join(., true_family_computer, by = 'Sample')
rm(true_species_computer, true_genus_computer, true_family_computer)
# FALSE records second
false_species_blast <- anti_join(blast, expert,  by = c('Sample', 'Taxon')) %>%
group_by(Sample) %>%
summarize(Species_F = n())
false_genus_blast <- anti_join(blast, expert_g, by = c('Sample', 'Genus')) %>%
group_by(Sample) %>%
distinct(Sample, Genus) %>%
summarize(Genera_F = n())
false_family_blast <-anti_join(blast, expert_f, by = c('Sample', 'Family')) %>%
group_by(Sample) %>%
distinct(Sample, Family) %>%
summarize(Family_F = n())
blast_incorrect <- left_join(false_species_blast, false_genus_blast, by = 'Sample') %>%
left_join(., false_family_blast, by = 'Sample')
blast_results <- left_join(blast_correct, blast_incorrect, by = 'Sample') %>%
mutate(across(where(is.numeric), ~ replace_na(.x, 0)))
rm(false_species_blast, false_genus_blast, false_family_blast, blast_correct, blast_incorrect)
false_species_computer <- anti_join(automated, expert,  by = c('Sample', 'Taxon')) %>%
group_by(Sample) %>%
summarize(Species_F = n())
false_genus_computer <- anti_join(automated, expert_g, by = c('Sample', 'Genus')) %>%
group_by(Sample) %>%
distinct(Sample, Genus) %>%
summarize(Genera_F = n())
false_family_computer <-anti_join(automated, expert_f, by = c('Sample', 'Family')) %>%
group_by(Sample) %>%
distinct(Sample, Family) %>%
summarize(Family_F = n())
computer_incorrect <- left_join(false_species_computer, false_genus_computer, by = 'Sample') %>%
left_join(., false_family_computer, by = 'Sample')
computer_results <- left_join(computer_correct, computer_incorrect, by = 'Sample') %>%
mutate(across(where(is.numeric), ~ replace_na(.x, 0)))
rm(false_species_computer, false_genus_compuer, false_family_computer,
computer_correct, computer_incorrect)
### calculate accuracy
# number of assignments
automated_cnts <- automated %>%
group_by(Sample) %>%
count(Rank) %>%
pivot_wider(names_from = Rank, values_from = n, names_prefix = 'NO_') %>%
mutate(Method = 'COMP')
blast_cnts <- blast %>%
group_by(Sample) %>%
count(Rank) %>%
pivot_wider(names_from = Rank, values_from = n, names_prefix = 'NO_') %>%
mutate(Method = 'BLAST')
cnts <- bind_rows(automated_cnts, blast_cnts)
spp_count <- expert %>%
group_by(Sample) %>%
count(name = 'Spp_No')
gen_count <- expert_g %>%
group_by(Sample) %>%
count(name = 'Gen_No')
fam_count <- expert_f %>%
group_by(Sample) %>%
count(name = 'Fam_No')
ACC_sens_Spec <- bind_rows(
mutate(blast_results, Method = 'BLAST'),
mutate(computer_results, Method  = 'COMP')
) %>%
left_join(., spp_count) %>%
left_join(., gen_count) %>%
left_join(., fam_count) %>%
left_join(., cnts, by = c('Sample', 'Method')) %>%
rowwise() %>%
mutate(
Species_false = NO_Species - Species_T,
Sp_Acc = (Species_T / NO_Species) * 100,
Gen_Acc = (Genera_T / sum(NO_Genus, NO_Species, na.rm = T) ) * 100,
Sp_Sens = (Species_T)  / (Species_T + (Spp_No - Species_T)) * 100
)
# Spp_No - Species_match is my TRUE NEGATIVE
# species_false is MY FALSE POSITIVE
wt_res <- wilcox.test(
pull(ACC_sens_Spec[ACC_sens_Spec$Method == 'COMP', 'Sp_Acc']) ,
pull(ACC_sens_Spec[ACC_sens_Spec$Method == 'BLAST', 'Sp_Acc']),
alternative = "greater"
)
my_means <- ggpubr::compare_means(Sp_Acc ~ Method,  data = ACC_sens_Spec)
my_comparisons <- my_means %>%
nest(groups = c(group1, group2)) %>%
pull(groups) %>%
map(., as.character)
sample_sizes <- ACC_sens_Spec %>%
dplyr::group_by(Method) %>%
dplyr::tally() %>%
dplyr::mutate(n = paste0('n = ', n))
min_v <- dplyr::summarise(ACC_sens_Spec, mean_mpg = floor(min(Sp_Acc))) |>
pull() |> min()
ggplot(ACC_sens_Spec, aes(y = Sp_Acc,  x= Method, color = Method),
alpha = 0.5) +
stat_boxplot(notch = T, notchwidth = 0.75,
varwidth = T,
outlier.shape = F, outlier.alpha = 0.8, outlier.colour = 'black') +
geom_jitter(width = 0.1, shape = 1) +
geom_text(data = sample_sizes,
aes(Method, Inf, label = n), color = 'black',
vjust = "inward", size = 4,
y = min_v * 0.5) +
ggpubr::stat_compare_means(comparisons = my_comparisons,
aes(label = ..p.signif..),
tip.length = 0, vjust = 0.25, size = 4) +
expand_limits(y= min_v - 5) +
theme_bw() +
scale_colour_manual(values = c('#F4AFB4', '#94A89A')) +
scale_y_continuous(labels = scales::percent_format(scale = 1)) +
scale_x_discrete(labels = c('BLAST', 'Post Classification')) +
labs(y = 'Accuracy', title = 'Accuracy of "naive" BLAST and post classification process') +
theme(legend.position = 'none',
plot.title = element_text(hjust = 0.5))
View(all_classifications)
all_classifications %>% select(Family, Genus)
all_classifications %>%
ungroup() %>%
select(Family, Genus)
all_classifications %>%
ungroup() %>%
select(Family, Genus) %>%
distinct()
fam <- all_classifications %>%
ungroup() %>%
select(Family, Genus) %>%
distinct()
expert %>%
group_by(Taxon) %>%
add_count(name = 'No.Corb') %>%
mutate(mean_percent_corb = sum(Percent_Sample)/No.Corb) %>%
select(Genus, Species = Taxon, Percent_Sample, No.Corb, mean_percent_corb) %>%
left_join(., fam, by = 'Genus')
expert %>%
group_by(Taxon) %>%
add_count(name = 'No.Corb') %>%
mutate(mean_percent_corb = sum(Percent_Sample)/No.Corb) %>%
select(Genus, Species = Taxon, Percent_Sample, No.Corb, mean_percent_corb) %>%
left_join(., fam, by = 'Genus') %>%
relocate(Family, .before = Genus)
expert %>%
group_by(Taxon) %>%
add_count(name = 'No.Corb') %>%
mutate(mean_percent_corb = sum(Percent_Sample)/No.Corb) %>%
select(Genus, Species = Taxon, Percent_Sample, No.Corb, mean_percent_corb) %>%
left_join(., fam, by = 'Genus') %>%
select(-Percent_Sample) %>%
relocate(Family, .before = Genus)
expert %>%
group_by(Taxon) %>%
add_count(name = 'No.Corb') %>%
mutate(mean_percent_corb = round( sum(Percent_Sample)/No.Corb, 1)) %>%
select(Genus, Species = Taxon, Percent_Sample, No.Corb, mean_percent_corb) %>%
left_join(., fam, by = 'Genus') %>%
select(-Percent_Sample) %>%
relocate(Family, .before = Genus)
expert %>%
group_by(Taxon) %>%
add_count(name = 'No.Corb') %>%
mutate(mean_percent_corb = round( sum(Percent_Sample)/No.Corb, 1)) %>%
select(Genus, Species = Taxon, Percent_Sample, No.Corb, mean_percent_corb) %>%
left_join(., fam, by = 'Genus') %>%
select(-Percent_Sample) %>%
relocate(Family, .before = Genus)
expert %>%
group_by(Taxon) %>%
add_count(name = 'No.Corb') %>%
mutate(mean_percent_corb = round( sum(Percent_Sample)/No.Corb, 1)) %>%
select(Genus, Species = Taxon, Percent_Sample, No.Corb, mean_percent_corb) %>%
left_join(., fam, by = 'Genus') %>%
select(-Percent_Sample) %>%
relocate(Family, .before = Genus) %>%
distinct()
expert %>%
group_by(Taxon) %>%
add_count(name = 'No.Corb') %>%
mutate(mean_percent_corb = round( sum(Percent_Sample)/No.Corb, 1)) %>%
select(Genus, Species = Taxon, Percent_Sample, No.Corb, mean_percent_corb) %>%
left_join(., fam, by = 'Genus') %>%
select(-Percent_Sample) %>%
relocate(Family, .before = Genus) %>%
filter(No.Corb > 2)
expert %>%
group_by(Taxon) %>%
add_count(name = 'No.Corb') %>%
mutate(mean_percent_corb = round( sum(Percent_Sample)/No.Corb, 1)) %>%
select(Genus, Species = Taxon, Percent_Sample, No.Corb, mean_percent_corb) %>%
left_join(., fam, by = 'Genus') %>%
select(-Percent_Sample) %>%
relocate(Family, .before = Genus) %>%
filter(No.Corb > 2) %>%
distinct()
expert %>%
group_by(Taxon) %>%
add_count(name = 'No.Corb') %>%
mutate(mean_percent_corb = round( sum(Percent_Sample)/No.Corb, 1)) %>%
select(Genus, Species = Taxon, Percent_Sample, No.Corb, mean_percent_corb) %>%
left_join(., fam, by = 'Genus') %>%
select(-Percent_Sample) %>%
relocate(Family, .before = Genus) %>%
filter(No.Corb > 3) %>%
distinct()
expert %>%
group_by(Taxon) %>%
add_count(name = 'No.Corb') %>%
mutate(mean_percent_corb = round( sum(Percent_Sample)/No.Corb, 1)) %>%
select(Genus, Species = Taxon, Percent_Sample, No.Corb, mean_percent_corb) %>%
left_join(., fam, by = 'Genus') %>%
select(-Percent_Sample) %>%
relocate(Family, .before = Genus) %>%
filter(No.Corb > 4) %>%
distinct()
expert %>%
group_by(Taxon) %>%
add_count(name = 'No.Corb') %>%
mutate(mean_percent_corb = round( sum(Percent_Sample)/No.Corb, 1)) %>%
select(Genus, Species = Taxon, Percent_Sample, No.Corb, mean_percent_corb) %>%
left_join(., fam, by = 'Genus') %>%
select(-Percent_Sample) %>%
relocate(Family, .before = Genus) %>%
filter(No.Corb > 4) %>%
distinct() %>%
arrange(Family, Genus)
expert %>%
group_by(Taxon) %>%
add_count(name = 'No.Corb') %>%
mutate(mean_percent_corb = round( sum(Percent_Sample)/No.Corb, 1),
Species = str_remove(Species, '^.* ')) %>%
select(Genus, Species = Taxon, Percent_Sample, No.Corb, mean_percent_corb) %>%
left_join(., fam, by = 'Genus') %>%
select(-Percent_Sample) %>%
relocate(Family, .before = Genus) %>%
filter(No.Corb > 4) %>%
distinct() %>%
arrange(Family, Genus) %>%
```
expert %>%
group_by(Taxon) %>%
add_count(name = 'No.Corb') %>%
mutate(mean_percent_corb = round( sum(Percent_Sample)/No.Corb, 1),
Species = str_remove(Species, '^.* ')) %>%
select(Genus, Species = Taxon, Percent_Sample, No.Corb, mean_percent_corb) %>%
left_join(., fam, by = 'Genus') %>%
select(-Percent_Sample) %>%
relocate(Family, .before = Genus) %>%
filter(No.Corb > 4) %>%
distinct() %>%
arrange(Family, Genus)
expert %>%
group_by(Taxon) %>%
add_count(name = 'No.Corb') %>%
mutate(mean_percent_corb = round( sum(Percent_Sample)/No.Corb, 1),
Species = str_remove(Species, '^.* '))# %>%
expert %>%
group_by(Taxon) %>%
add_count(name = 'No.Corb') %>%
mutate(mean_percent_corb = round( sum(Percent_Sample)/No.Corb, 1),
Taxon = str_remove(Taxon, '^.* '))# %>%
expert %>%
group_by(Taxon) %>%
add_count(name = 'No.Corb') %>%
mutate(mean_percent_corb = round( sum(Percent_Sample)/No.Corb, 1),
Taxon = str_remove(Taxon, '^.* ')) %>%
select(Genus, Species = Taxon, Percent_Sample, No.Corb, mean_percent_corb) %>%
left_join(., fam, by = 'Genus') %>%
select(-Percent_Sample) %>%
relocate(Family, .before = Genus) %>%
filter(No.Corb > 4) %>%
distinct() %>%
arrange(Family, Genus)
expert %>%
group_by(Taxon) %>%
add_count(name = 'No.Corb') %>%
mutate(mean_percent_corb = round( sum(Percent_Sample)/No.Corb, 1),
Taxon = str_remove(Taxon, '^.* ')) %>%
select(Genus, Species = Taxon, Percent_Sample, No.Corb, mean_percent_corb) %>%
left_join(., fam, by = 'Genus') %>%
select(-Percent_Sample) %>%
relocate(Family, .before = Genus) %>%
filter(No.Corb > 3) %>%
distinct() %>%
arrange(Family, Genus)
expert %>%
group_by(Taxon) %>%
add_count(name = 'No.Corb') %>%
mutate(mean_percent_corb = round( sum(Percent_Sample)/No.Corb, 1),
Taxon = str_remove(Taxon, '^.* ')) %>%
select(Genus, Species = Taxon, Percent_Sample, No.Corb, mean_percent_corb) %>%
left_join(., fam, by = 'Genus') %>%
select(-Percent_Sample) %>%
relocate(Family, .before = Genus) %>%
filter(No.Corb > 4) %>%
distinct() %>%
arrange(Family, Genus)
expert %>%
group_by(Taxon) %>%
add_count(name = 'No.Corb') %>%
mutate(mean_percent_corb = round( median(Percent_Sample), 1),
Taxon = str_remove(Taxon, '^.* ')) %>%
select(Genus, Species = Taxon, Percent_Sample, No.Corb, mean_percent_corb) %>%
left_join(., fam, by = 'Genus') %>%
select(-Percent_Sample) %>%
relocate(Family, .before = Genus) %>%
filter(No.Corb > 4) %>%
distinct() %>%
arrange(Family, Genus)
expert %>%
group_by(Taxon) %>%
add_count(name = 'No.Corb') %>%
mutate(median_percent_corb = round( median(Percent_Sample), 1),
Taxon = str_remove(Taxon, '^.* ')) %>%
select(Genus, Species = Taxon, Percent_Sample, No.Corb, mean_percent_corb) %>%
left_join(., fam, by = 'Genus') %>%
select(-Percent_Sample) %>%
relocate(Family, .before = Genus) %>%
filter(No.Corb > 4) %>%
distinct() %>%
arrange(Family, Genus)
expert %>%
group_by(Taxon) %>%
add_count(name = 'No.Corb') %>%
mutate(median_percent_corb = round( median(Percent_Sample), 1),
Taxon = str_remove(Taxon, '^.* ')) %>%
select(Genus, Species = Taxon, Percent_Sample, No.Corb, median_percent_corb) %>%
left_join(., fam, by = 'Genus') %>%
select(-Percent_Sample) %>%
relocate(Family, .before = Genus) %>%
filter(No.Corb > 4) %>%
distinct() %>%
arrange(Family, Genus)
expert %>%
group_by(Taxon) %>%
add_count(name = 'No.Corb') %>%
mutate(median_percent_corb = round( mean(Percent_Sample), 1),
Taxon = str_remove(Taxon, '^.* ')) %>%
select(Genus, Species = Taxon, Percent_Sample, No.Corb, median_percent_corb) %>%
left_join(., fam, by = 'Genus') %>%
select(-Percent_Sample) %>%
relocate(Family, .before = Genus) %>%
filter(No.Corb > 4) %>%
distinct() %>%
arrange(Family, Genus)
expert %>%
group_by(Taxon) %>%
add_count(name = 'No.Corb') %>%
mutate(median_percent_corb = round( mean(Percent_Sample), 1),
Taxon = str_remove(Taxon, '^.* ')) %>%
select(Genus, Species = Taxon, Percent_Sample, No.Corb, median_percent_corb) %>%
left_join(., fam, by = 'Genus') %>%
select(-Percent_Sample) %>%
relocate(Family, .before = Genus) %>%
filter(No.Corb > 4) %>%
distinct() %>%
arrange(Family, Genus)  %>%
knitr::kable()
expert %>%
group_by(Taxon) %>%
add_count(name = 'No.Corb') %>%
mutate(median_percent_corb = round( mean(Percent_Sample), 1),
Taxon = str_remove(Taxon, '^.* ')) %>%
select(Genus, Species = Taxon, Percent_Sample, No.Corb, median_percent_corb) %>%
left_join(., fam, by = 'Genus') %>%
select(-Percent_Sample) %>%
relocate(Family, .before = Genus) %>%
filter(No.Corb > 4) %>%
distinct() %>%
arrange(Family, Genus)  %>%
knitr::kable(
col.names = c('Family', 'Genus', 'Species', 'Corbiculae', 'Mean Amount')
)
expert %>%
group_by(Taxon) %>%
add_count(name = 'No.Corb') %>%
mutate(median_percent_corb = round( mean(Percent_Sample), 1),
Taxon = str_remove(Taxon, '^.* ')) %>%
select(Genus, Species = Taxon, Percent_Sample, No.Corb, median_percent_corb) %>%
left_join(., fam, by = 'Genus') %>%
select(-Percent_Sample) %>%
relocate(Family, .before = Genus) %>%
filter(No.Corb > 4) %>%
distinct() %>%
arrange(Family, Genus)  %>%
knitr::kable(
col.names = c('Family', 'Genus', 'Species', 'Corbiculae', 'Mean Amount')
) %>%
collapse_rows()
expert %>%
group_by(Taxon) %>%
add_count(name = 'No.Corb') %>%
mutate(median_percent_corb = round( mean(Percent_Sample), 1),
Taxon = str_remove(Taxon, '^.* ')) %>%
select(Genus, Species = Taxon, Percent_Sample, No.Corb, median_percent_corb) %>%
left_join(., fam, by = 'Genus') %>%
select(-Percent_Sample) %>%
relocate(Family, .before = Genus) %>%
filter(No.Corb > 4) %>%
distinct() %>%
arrange(Family, Genus)  %>%
knitr::kable(
caption = 'Plant species detected in five or more corbiculae loads',
col.names = c('Family', 'Genus', 'Species', 'No. Corbiculae', 'Mean Amount')
) %>%
collapse_rows()
expert %>%
group_by(Taxon) %>%
add_count(name = 'No.Corb') %>%
mutate(median_percent_corb = round( mean(Percent_Sample), 1),
Taxon = str_remove(Taxon, '^.* ')) %>%
select(Genus, Species = Taxon, Percent_Sample, No.Corb, median_percent_corb) %>%
left_join(., fam, by = 'Genus') %>%
select(-Percent_Sample) %>%
relocate(Family, .before = Genus) %>%
filter(No.Corb > 4) %>%
distinct() %>%
arrange(Family, Genus)  %>%
knitr::kable(
caption = 'Plant species detected in five or more corbiculae loads',
footnote = 'The mean only calculated across the samples where the species was detected',
col.names = c('Family', 'Genus', 'Species', 'No. Corbiculae', 'Mean Amount')
) %>%
collapse_rows()
?kable
expert %>%
group_by(Taxon) %>%
add_count(name = 'No.Corb') %>%
mutate(median_percent_corb = round( mean(Percent_Sample), 1),
Taxon = str_remove(Taxon, '^.* ')) %>%
select(Genus, Species = Taxon, Percent_Sample, No.Corb, median_percent_corb) %>%
left_join(., fam, by = 'Genus') %>%
select(-Percent_Sample) %>%
relocate(Family, .before = Genus) %>%
filter(No.Corb > 4) %>%
distinct() %>%
arrange(Family, Genus)  %>%
knitr::kable(
caption = 'Plant species detected in five or more corbiculae loads',
col.names = c('Family', 'Genus', 'Species', 'No. Corbiculae', 'Mean Amount')
) %>%
add_footnote('The mean only calculated across the samples where the species was detected')
expert %>%
group_by(Taxon) %>%
add_count(name = 'No.Corb') %>%
mutate(median_percent_corb = round( mean(Percent_Sample), 1),
Taxon = str_remove(Taxon, '^.* ')) %>%
select(Genus, Species = Taxon, Percent_Sample, No.Corb, median_percent_corb) %>%
left_join(., fam, by = 'Genus') %>%
select(-Percent_Sample) %>%
relocate(Family, .before = Genus) %>%
filter(No.Corb > 4) %>%
distinct() %>%
arrange(Family, Genus)  %>%
knitr::kable(
caption = 'Plant species detected in five or more corbiculae loads',
col.names = c('Family', 'Genus', 'Species', 'No. Samples', 'Mean Amount^a^')
) %>%
add_footnote(
'The mean only calculated across the samples where the species was detected') %>%
collapse_rows()
expert %>%
group_by(Taxon) %>%
add_count(name = 'No.Corb') %>%
mutate(median_percent_corb = round( mean(Percent_Sample), 1),
Taxon = str_remove(Taxon, '^.* '),
Taxon = if_else(Taxon %in% c('Salix', 'Erigeron'), 'sp.', Taxon)) %>%
select(Genus, Species = Taxon, Percent_Sample, No.Corb, median_percent_corb) %>%
left_join(., fam, by = 'Genus') %>%
select(-Percent_Sample) %>%
relocate(Family, .before = Genus) %>%
filter(No.Corb > 4) %>%
distinct() %>%
arrange(Family, Genus)  %>%
knitr::kable(
escape = F,
align = c('l', 'l', 'l', 'c', 'c'),
caption = 'Plant species detected in five or more corbiculae loads',
col.names = c('Family', 'Genus', 'Species', 'No. Samples', 'Mean Prop.\\textsuperscript{a}')
) %>%
add_footnote(
'The mean only calculated across the samples where the species was detected') %>%
collapse_rows()
limitations <- data.frame(
'Component' = c(
'Stage 1 Species Filter',
'Species Distribution Modelling',
'Phenological Modelling',
'Database Generation',
'Read Re-assignment',
'False Positives',
'Semi-Quantitative Inference'
),
'Limitation' = c(
'Test Data', # stage 1 species filter
'Number of Records; Taxonomically Difficult Groups', # SDM generation
'Post-Initiation of Climate Change Records', # phenological modelling
'Adequate Phylogenetic/Spatial Representation', # database generation
'Discrete Frequentist Data', # read re-assignment
'Which True Species?', # false positives
'Genome Size, Pollen Grain Size?' # semi-quantitative inference
),
'Paths_Forward' = c(
'Flash Plant Species Surveys on Plot',
'Develop and Disseminate Education Materials; Herbaria Collections',
'Advocate Herbarium Collections',
'Plant and Fungal Tree of Life; 10kP',
'Posterior-Probabilities; Floral Abundance, Nectar/Pollen Nutrition',
'Jaccard Index, Plot Abundance',
'Spike Samples with Reference Materials; Several C Sizes'
)
)
write.csv(limitations, '../data/Limitations_Table.csv', row.names = F)
read.csv('../data/Limitations_Table.csv') |>
knitr::kable(caption = 'Limitations Faced and Possible Solutions',
col.names = c('Method Component', 'Limitations', 'Paths Forward'))
rm(limitations)
