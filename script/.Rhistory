left_join(., blst_cnt, by = 'species') %>%
group_by(species, TAXON_NEW) %>%
mutate(Mu_Seqs = sum(Prcnt_seqs)/n,
species = str_remove(species, 'Bombus '))  %>%
distinct(species, TAXON_NEW, .keep_all = T) %>%
ungroup(TAXON_NEW) %>%
slice_max(Mu_Seqs, n = 10) %>%
select(plant.species = TAXON_NEW, species, n, Mu_Seqs, Genus, Family) %>%
mutate(rank = 1:n()) %>%
ungroup() %>%
mutate(Family = case_when(
Genus %in% c('Trollius', 'Caltha', 'Aquilegia', 'Delphinium') ~ 'Ranunculaceae',
Genus == 'Hydrophyllum' ~ 'Hydrophyllaceae',
Genus == 'Epilobium' ~ 'Onagraceae',
Genus == 'Viola' ~ 'Violaceae',
Genus == 'Salix' ~ 'Saliceae',
Genus == 'Cynoglossum' ~ 'Boraginaceae',
Genus == c('Arenaria', 'Odontostemma') ~ 'Caryophyllaceae',
Genus == 'Parnassia' ~ 'Celastraceae',
Genus %in% c('Erigeron', 'Symphyotrichum') ~ 'Asteraceae',
TRUE ~ Family
))
obs <- read.csv('../data/yearEndInteractionsObservations.csv')[,2:5] %>%
group_by(species) %>%
arrange(-bySpp) %>%
slice_head(n = 10)  %>%
mutate(plant.species = case_when(
plant.species == 'Adenolinum.lewisii' ~  'Linum lewisii',
plant.species == 'Lupinus.bakeri' ~ 'Lupinus sericeus' ,
plant.species == 'Dugaldia.hoopesii' ~ 'Hymenoxys hoopesii',
TRUE ~ plant.species
)) %>%
#mutate(Family = if_else(Family == 'UNKNOWN', 'HYDROPHYLLACEAE', Family)) %>%
separate(plant.species, into = 'Genus', extra = 'drop', remove = F) %>%
mutate(plant.species = str_replace(plant.species, '[.]', " ")) %>%
left_join(., gf_lkp, by = 'Genus') %>%
distinct() %>%
filter(species %in% tb$species) %>%
mutate(rank = 1:n()) %>%
ungroup()
## Which bombus species are shared??
# REMOVE KIRBIELLIUS, ONLY  A SINGLE FEEDING RECORD
obs <- filter(obs, !species %in% c('kirbiellus', 'mixtus'))
tb <- filter(tb, !species %in% c('kirbiellus', 'mixtus'))
tblist <- split(tb, tb$species) %>%
map(., ~ select(., plant.species, Genus, Family))
oblist <- split(obs, obs$species) %>%
map(., ~ select(., plant.species, Genus, Family))
species <- purrr::map2_int(tblist, oblist,
~ inner_join(.x, .y, by = 'plant.species') %>%
nrow())
genus <- purrr::map2_int(tblist, oblist,
~ inner_join(.x, .y, by = 'Genus') %>%
distinct(plant.species.y) %>% nrow()
)
family <- purrr::map2_int(tblist, oblist,
~ inner_join(.x, .y, by = 'Family') %>%
distinct(plant.species.y) %>%
nrow()
)
correct <- data.frame(Bombus.Species = names(species),
Species = species, Genus = genus, Family = family) %>%
# ObsMax = map_int(oblist, ~ nrow(.))) %>%
pivot_longer(!Bombus.Species, names_to = 'Observation') %>%
mutate(Observation = factor(Observation,  levels = c("Species", "Genus", "Family")))
n_corbiculae <- tb %>%
distinct(species, .keep_all = T) %>% pull(n)
prop_obs <- obs %>%
group_by(species) %>%
slice_max(bySpp, n = 5, with_ties = F) %>%
mutate(prop = sum(bySpp)/total) %>%
distinct(species, .keep_all = T) %>%
pull(prop)
# are mertensia and Asteraceae 1 & 2 detected in all Pollen samples where the bee was COLLECTED ON THEM ?
pmorph <- read.csv('../data/morpho_pollen.csv') %>%
filter(!sample.id %in% c(45, 54))
blst_seqs <- distinct(blst, sample.id)
pmorph <- filter(pmorph, sample.id %in% blst$sample.id) %>%
group_by(sample.id) %>%
mutate(Prop = sum/sum(sum))
mertensia_samples <- pmorph %>%
filter(morphotype == 'MERTENSIA') %>%
select(sample.id, morphotype, Prop, sum)
mertensia_samples <- filter(mertensia_samples, sample.id %in% blst_seqs$sample.id)
blst_mertensia <- blst %>%
filter(Family == 'Boraginaceae') %>%
select(sample.id,  Prcnt_seqs, Seqs_pr_taxon, Total_seqs, Prcnt_Seqs_Class) %>%
group_by(sample.id) %>%
mutate(Prcnt_seqs = sum(Prcnt_seqs),
morphotype = 'MERTENSIA') %>%
distinct(sample.id, .keep_all = T)
mertensia_detected <- mertensia_samples %>%
mutate(DETECTED = if_else(sample.id %in% blst_mertensia$sample.id, 1, 0))
# sample 26 - very strange !!!! this needs investigation - ALSO THE ERICOID IS LIKELY ONAGRAD !?
blst_aster <- blst %>%
filter(Family == 'Asteraceae') %>%
group_by(sample.id) %>%
distinct(sample.id, .keep_all = T)
# ASTER 2 HERE...
aster2_samples <- pmorph %>%
filter(morphotype == 'ASTERACEAE_2')
blst_aster2 <- filter(blst_aster, Genus %in%
c('Taraxacum', 'Helianthella', 'Scabrethia')) %>%
mutate(morphotype = 'ASTERACEAE_2')
aster2_detected <- aster2_samples %>%
mutate(DETECTED = if_else(sample.id %in% blst_aster2$sample.id, 1, 0))
# ASTER 1 HERE... ? WERE ALL OF THESE SPECIES PRUNED... ?
aster1_samples <- pmorph %>%
filter(morphotype == 'ASTERACEAE_1')
blst_aster1 <- filter(blst_aster, !Genus %in% c('Taraxacum', 'Helianthella',
'Scabrethia') ) %>%
mutate(morphotype = 'ASTERACEAE_1')
aster1_detected <- aster1_samples %>%
mutate(DETECTED = if_else(sample.id %in% blst_aster1$sample.id, 1, 0))
# ALL HIGH NUMBER ASTERACEAE
aster_samples <- pmorph %>%
filter(str_detect(morphotype, 'ASTER.*'))
aster_detected <- aster_samples %>%
mutate(DETECTED = if_else(sample.id %in% blst_aster$sample.id, 1, 0))
aa <- prcnt_detect(mertensia_detected, Lprop = 0.01, Hprop = 1)
bb <- prcnt_detect(aster1_detected, Lprop = 0.001, Hprop = 0.01)
cc <- prcnt_detect(aster2_detected, Lprop = 0.001, Hprop = 0.01)
dd <- prcnt_detect(aster_detected, Lprop = 0.01, Hprop = 1)
ff <- prcnt_detect(aster_detected, Lprop = 0.001, Hprop = 0.01)
# Semi-quantitative accord between sequence % and Grain Count
palyn_cnt <- bind_rows(aster1_samples, aster2_samples, mertensia_samples) %>%
select(morphotype, countProp = Prop)
pollen_props <- bind_rows(blst_aster1, blst_aster2, blst_mertensia) %>%
select(morphotype, sequenceProp = Prcnt_seqs, Seqs_pr_taxon, Total_seqs, Prcnt_Seqs_Class) %>%
left_join(., palyn_cnt, by = c('sample.id', 'morphotype')) %>%
drop_na()
rm(mertensia_samples, blst_aster, blst_aster1, blst_aster2, aster1_samples,
aster2_samples, palyn_cnt, blst_mertensia, aster_samples)
grains_counted <- pmorph %>%
group_by(sample.id) %>%
summarize(grains_counted = sum(sum)) %>%
pull(grains_counted)
raw_seqs <- read.delim('../data/raw_reads_metagenome_seq.txt', header = F) %>%
mutate(V1 = str_trim(V1)) %>%
separate(V1, c('seq', 'sampleFR'), sep = ' ') %>%
mutate(seq = round(as.numeric(seq)/4),
sample = str_extract(sampleFR, '.*L002_')) %>%
filter(sampleFR != 'total') %>%
group_by(sample) %>%
mutate(totalReads = sum(seq)) %>%
distinct(totalReads) %>%
pull(totalReads)
trimmed_seqs <- read.delim('../data/trimmed_reads_metagenome_seq.txt', header = F) %>%
mutate(V1 = str_trim(V1)) %>%
separate(V1, c('seq', 'sampleFR'), sep = ' ') %>%
mutate(seq = round(as.numeric(seq)/4),
sample = str_extract(sampleFR, '.*paired')) %>%
filter(sampleFR != 'total') %>%
group_by(sample) %>%
mutate(totalReads = sum(seq)) %>%
distinct(totalReads) %>%
pull(totalReads)
krak <- read.csv('../data/kraken_proc_reads.csv')
brack <- read.csv('../data/bracken_proc_reads.csv')
blast <- read.csv('../data/blast_proc_reads.csv')
loci <- read.csv('../data/reads_per_loci.csv') %>% group_by(Sample)
no_loci <- loci %>% group_by(Sample) %>% count(name = 'no_loci')
no_reads <- loci %>% group_by(loci) %>% summarize(readsLoci = sum(n))
pp_seqs_t <- read.csv( file.path('../data', 'Sequence_Reclass_table.csv') ) %>%
mutate(across(where(is.numeric), ~ round(.x, 1)))
knitr::kable(pp_seqs_t, align = "c",
col.names = c('Condition', 'No. Class.', 'Prcnt. Class.', 'Total Seqs', 'Rank'),
caption = "Post classification of Sequences via Taxonomy and Ecology,\ntop 15 most abundant reads") %>%
kableExtra::kable_styling(
latex_options = "striped",
stripe_color = "gray!10")
seqs_sp <- round(sum(pp_seqs_t[pp_seqs_t$Rank=='Species','Prcnt_Records']), 1)
seqs_ge <- round(sum(pp_seqs_t[pp_seqs_t$Rank=='Genus','Prcnt_Records']), 1)
seqs_fa <- round(sum (pp_seqs_t[pp_seqs_t$Rank=='Family','Prcnt_Records']), 1)
sp_total_seqs <- round(sum(pp_seqs_t[pp_seqs_t$Rank=='Species','Total_Prcnt_Seqs']),1)
sp_total_seqs <- round(sum(pp_seqs_t[pp_seqs_t$Rank=='Genus','Total_Prcnt_Seqs']),1)
fa_total_seqs <- round(sum(pp_seqs_t[pp_seqs_t$Rank=='Family','Total_Prcnt_Seqs']),1)
byhand <- blst %>%
filter(TAXON_NEW != TAXON_NEW)
j <- toString(paste0(names(table(byhand$Condition)), ": ",
as.vector (table(byhand$Condition))))
gen <- byhand[byhand$TAXON_NEW==c('Salix'),]
spp <- byhand[byhand$TAXON_NEW==c('Sorbus scopulina', 'Pseudostellaria jamesiana'),]
blast <- read.csv('../data/tally_blast_classifications.csv') %>%
group_by(Sample) %>%
slice_max(Prcnt_seqs, n = 10) %>%
select(Sample, Taxon = taxid, Percent_Sample = Prcnt_seqs) %>%
mutate(
Taxon = str_replace(Taxon, 'Arenaria', 'Eremogone'),
Genus = str_remove(str_extract(Taxon, '^.* '), ' '),
Method = 'BLAST')
automated <- read.csv('../data/Post_Classified_BLAST_sqs.csv') %>%
group_by(Sample, TAXON_NEW) %>%
mutate(Prcnt_seqs = sum(Prcnt_seqs)) %>%
drop_na() %>%
distinct(Sample, TAXON_NEW, .keep_all = T) %>%
ungroup(TAXON_NEW) %>%
slice_max(Prcnt_seqs, n = 10) %>%
select(Sample, Genus = GENUS, Taxon = TAXON_NEW, Percent_Sample = Prcnt_seqs) %>%
mutate(across(where(is.character), ~ str_replace(., 'Arenaria', 'Eremogone')),
Method = 'Automated')
expert <- read.csv('../data/Fully_Integrated_Corbiculae.csv') %>%
rename(Sample = sample.id) %>%
mutate(across(where(is.character), ~ str_trim(.)),
Method = 'Expert') %>%
drop_na() %>%
relocate()
genera2query <- na.omit(unique(c(blast$Genus, automated$Genus, expert$Genus)))
genera2query <- genera2query[genera2query != 'Ericaceae']
genera2query <- taxizedb::name2taxid(genera2query, out_type = 'summary')
genera_out <- taxizedb::classification(genera2query$id, db='ncbi', rank = 'family')
genera_out <- map(genera_out, ~
data.frame(
'Family' = filter(.x, rank == "family") %>% select(name),
'Genus' = filter(.x, rank == 'genus') %>%  select(name)
)) %>%
bind_rows() %>%
rename(Family = 1, Genus = 2)
genera_out <- filter(genera_out, !Family %in% c('Mertensiidae', 'Hesperiidae'))
all_classifications <- bind_rows(
automated, blast, expert
) %>%
left_join(., genera_out, by = 'Genus') %>%
mutate(Rank = case_when(
is.na(Family) ~ 'Family',
Taxon == Family ~ 'Family',
Taxon == Genus ~ 'Genus',
TRUE ~ 'Species'
),
Family = if_else(Taxon == 'Ericaceae', 'Eriaceae', Family))
rm(genera2query, genera_out, automated, blast, expert)
expert <- all_classifications %>% filter(Method == 'Expert')
blast <- all_classifications %>%
filter(Method == 'BLAST' & Sample %in% expert$Sample)
automated <- all_classifications %>%
filter(Method == 'Automated' & Sample %in% expert$Sample)
## now determine which proportion of records are correct/incorrect
expert_g <- expert %>%
select(Sample, Genus) %>%
distinct()
expert_f <- expert %>%
select(Sample, Family) %>%
distinct()
# CORRECT RECORDS FIRST
true_species_blast <- left_join(expert, blast, by = c('Sample', 'Taxon')) %>%
group_by(Sample) %>%
drop_na(Method.y) %>%
summarize(Species_T = n())
true_genus_blast <- left_join(expert_g, blast, by = c('Sample', 'Genus')) %>%
group_by(Sample) %>%
drop_na(Method) %>%
distinct(Sample, Genus) %>%
summarize(Genera_T = n())
true_family_blast <- inner_join(expert_f, blast, by = c('Sample', 'Family')) %>%
group_by(Sample) %>%
drop_na(Method) %>%
distinct(Sample, Family) %>%
summarize(Family_T = n())
blast_correct <- left_join(true_species_blast, true_genus_blast, by = 'Sample') %>%
left_join(., true_family_blast, by = 'Sample')
rm(true_species_blast, true_genus_blast, true_family_blast)
true_species_computer <- left_join(expert,
filter(automated, Rank == 'Species'),
by = c('Sample', 'Taxon')) %>%
group_by(Sample) %>%
drop_na(Method.y) %>%
summarize(Species_T = n())
true_genus_computer <- left_join(expert_g,  filter(automated, Rank != 'Family'),
by = c('Sample', 'Genus')) %>%
group_by(Sample) %>%
drop_na(Method) %>%
distinct(Sample, Genus) %>%
summarize(Genera_T = n())
true_family_computer <- left_join(expert_f, automated, by = c('Sample', 'Family')) %>%
group_by(Sample) %>%
drop_na(Method) %>%
distinct(Sample, Family) %>%
summarize(Family_T = n())
computer_correct <- left_join(true_species_computer, true_genus_computer, by = 'Sample') %>%
left_join(., true_family_computer, by = 'Sample')
rm(true_species_computer, true_genus_computer, true_family_computer)
# FALSE records second
false_species_blast <- anti_join(blast, expert,  by = c('Sample', 'Taxon')) %>%
group_by(Sample) %>%
summarize(Species_F = n())
false_genus_blast <- anti_join(blast, expert_g, by = c('Sample', 'Genus')) %>%
group_by(Sample) %>%
distinct(Sample, Genus) %>%
summarize(Genera_F = n())
false_family_blast <-anti_join(blast, expert_f, by = c('Sample', 'Family')) %>%
group_by(Sample) %>%
distinct(Sample, Family) %>%
summarize(Family_F = n())
blast_incorrect <- left_join(false_species_blast, false_genus_blast, by = 'Sample') %>%
left_join(., false_family_blast, by = 'Sample')
blast_results <- left_join(blast_correct, blast_incorrect, by = 'Sample') %>%
mutate(across(where(is.numeric), ~ replace_na(.x, 0)))
rm(false_species_blast, false_genus_blast, false_family_blast, blast_correct, blast_incorrect)
false_species_computer <- anti_join(automated, expert,  by = c('Sample', 'Taxon')) %>%
group_by(Sample) %>%
summarize(Species_F = n())
false_genus_computer <- anti_join(automated, expert_g, by = c('Sample', 'Genus')) %>%
group_by(Sample) %>%
distinct(Sample, Genus) %>%
summarize(Genera_F = n())
false_family_computer <-anti_join(automated, expert_f, by = c('Sample', 'Family')) %>%
group_by(Sample) %>%
distinct(Sample, Family) %>%
summarize(Family_F = n())
computer_incorrect <- left_join(false_species_computer, false_genus_computer, by = 'Sample') %>%
left_join(., false_family_computer, by = 'Sample')
computer_results <- left_join(computer_correct, computer_incorrect, by = 'Sample') %>%
mutate(across(where(is.numeric), ~ replace_na(.x, 0)))
rm(false_species_computer, false_genus_compuer, false_family_computer,
computer_correct, computer_incorrect)
### calculate accuracy
# number of assignments
automated_cnts <- automated %>%
group_by(Sample) %>%
count(Rank) %>%
pivot_wider(names_from = Rank, values_from = n, names_prefix = 'NO_') %>%
mutate(Method = 'COMP')
blast_cnts <- blast %>%
group_by(Sample) %>%
count(Rank) %>%
pivot_wider(names_from = Rank, values_from = n, names_prefix = 'NO_') %>%
mutate(Method = 'BLAST')
cnts <- bind_rows(automated_cnts, blast_cnts)
spp_count <- expert %>%
group_by(Sample) %>%
count(name = 'Spp_No')
gen_count <- expert_g %>%
group_by(Sample) %>%
count(name = 'Gen_No')
fam_count <- expert_f %>%
group_by(Sample) %>%
count(name = 'Fam_No')
ACC_sens_Spec <- bind_rows(
mutate(blast_results, Method = 'BLAST'),
mutate(computer_results, Method  = 'COMP')
) %>%
left_join(., spp_count) %>%
left_join(., gen_count) %>%
left_join(., fam_count) %>%
left_join(., cnts, by = c('Sample', 'Method')) %>%
rowwise() %>%
mutate(
Species_false = NO_Species - Species_T,
Sp_Acc = (Species_T / NO_Species) * 100,
Gen_Acc = (Genera_T / sum(NO_Genus, NO_Species, na.rm = T) ) * 100,
Sp_Sens = (Species_T)  / (Species_T + (Spp_No - Species_T)) * 100
)
# Spp_No - Species_match is my TRUE NEGATIVE
# species_false is MY FALSE POSITIVE
wt_res <- wilcox.test(
pull(ACC_sens_Spec[ACC_sens_Spec$Method == 'COMP', 'Sp_Acc']) ,
pull(ACC_sens_Spec[ACC_sens_Spec$Method == 'BLAST', 'Sp_Acc']),
alternative = "greater"
)
my_means <- ggpubr::compare_means(Sp_Acc ~ Method,  data = ACC_sens_Spec)
my_comparisons <- my_means %>%
nest(groups = c(group1, group2)) %>%
pull(groups) %>%
map(., as.character)
sample_sizes <- ACC_sens_Spec %>%
dplyr::group_by(Method) %>%
dplyr::tally() %>%
dplyr::mutate(n = paste0('n = ', n))
min_v <- dplyr::summarise(ACC_sens_Spec, mean_mpg = floor(min(Sp_Acc))) |>
pull() |> min()
ggplot(ACC_sens_Spec, aes(y = Sp_Acc,  x= Method, color = Method),
alpha = 0.5) +
stat_boxplot(notch = T, notchwidth = 0.75,
varwidth = T,
outlier.shape = F, outlier.alpha = 0.8, outlier.colour = 'black') +
geom_jitter(width = 0.1, shape = 1) +
geom_text(data = sample_sizes,
aes(Method, Inf, label = n), color = 'black',
vjust = "inward", size = 4,
y = min_v * 0.5) +
ggpubr::stat_compare_means(comparisons = my_comparisons,
aes(label = ..p.signif..),
tip.length = 0, vjust = 0.25, size = 4) +
expand_limits(y= min_v - 5) +
theme_bw() +
scale_colour_manual(values = c('#F4AFB4', '#94A89A')) +
scale_y_continuous(labels = scales::percent_format(scale = 1)) +
scale_x_discrete(labels = c('BLAST', 'Post Classification')) +
labs(y = 'Accuracy', title = 'Accuracy of "naive" BLAST and post classification process') +
theme(legend.position = 'none',
plot.title = element_text(hjust = 0.5))
fam <- all_classifications %>%
ungroup() %>%
select(Family, Genus) %>%
distinct()
expert %>%
group_by(Taxon) %>%
add_count(name = 'No.Corb') %>%
mutate(median_percent_corb = round( mean(Percent_Sample), 1),
Taxon = str_remove(Taxon, '^.* '),
Taxon = if_else(Taxon %in% c('Salix', 'Erigeron'), 'sp.', Taxon)) %>%
select(Genus, Species = Taxon, Percent_Sample, No.Corb, median_percent_corb) %>%
left_join(., fam, by = 'Genus') %>%
select(-Percent_Sample) %>%
relocate(Family, .before = Genus) %>%
filter(No.Corb > 4) %>%
distinct() %>%
arrange(Family, Genus)  %>%
knitr::kable(
escape = F,
align = c('l', 'l', 'l', 'c', 'c'),
caption = 'Plant species detected in five or more corbiculae loads',
col.names = c('Family', 'Genus', 'Species', 'No. Samples', 'Mean Prop.\\textsuperscript{a}')
) %>%
add_footnote(
'The mean only calculated across the samples where the species was detected') %>%
collapse_rows()
expert %>%
group_by(Taxon) %>%
add_count(name = 'No.Corb') %>%
mutate(median_percent_corb = round( mean(Percent_Sample), 1),
Taxon = str_remove(Taxon, '^.* '),
Taxon = if_else(Taxon %in% c('Salix', 'Erigeron'), 'sp.', Taxon)) %>%
select(Genus, Species = Taxon, Percent_Sample, No.Corb, median_percent_corb) %>%
left_join(., fam, by = 'Genus') %>%
select(-Percent_Sample) %>%
relocate(Family, .before = Genus) %>%
filter(No.Corb > 4) %>%
distinct() %>%
arrange(Family, Genus)  #%>%
expert %>%
group_by(Taxon) %>%
add_count(name = 'No.Corb') %>%
mutate(median_percent_corb = round( mean(Percent_Sample), 1),
Taxon = str_remove(Taxon, '^.* '),
Taxon = if_else(Taxon %in% c('Salix', 'Erigeron'), 'sp.', Taxon)) %>%
select(Genus, Species = Taxon, Percent_Sample, No.Corb, median_percent_corb) %>%
left_join(., fam, by = 'Genus') %>%
select(-Percent_Sample) %>%
relocate(Family, .before = Genus) %>%
filter(No.Corb > 4) %>%
distinct() %>%
arrange(Family, Genus)  %>%
knitr::kable(
escape = F,
align = c('l', 'l', 'l', 'c', 'c'),
caption = 'Plant species detected in five or more corbiculae loads',
col.names = c('Family', 'Genus', 'Species', 'No. Samples', 'Mean Prop.\\textsuperscript{a}')
) #%>%
expert %>%
group_by(Taxon) %>%
add_count(name = 'No.Corb') %>%
mutate(median_percent_corb = round( mean(Percent_Sample), 1),
Taxon = str_remove(Taxon, '^.* '),
Taxon = if_else(Taxon %in% c('Salix', 'Erigeron'), 'sp.', Taxon)) %>%
select(Genus, Species = Taxon, Percent_Sample, No.Corb, median_percent_corb) %>%
left_join(., fam, by = 'Genus') %>%
select(-Percent_Sample) %>%
relocate(Family, .before = Genus) %>%
filter(No.Corb > 4) %>%
distinct() %>%
arrange(Family, Genus)  %>%
knitr::kable(
escape = F,
align = c('l', 'l', 'l', 'c', 'c'),
caption = 'Plant species detected in five or more corbiculae loads',
col.names = c('Family', 'Genus', 'Species', 'No. Samples', 'Mean Prop.\\textsuperscript{a}')
) %>%
add_footnote(
'The mean only calculated across the samples where the species was detected') #%>%
expert %>%
group_by(Taxon) %>%
add_count(name = 'No.Corb') %>%
mutate(median_percent_corb = round( mean(Percent_Sample), 1),
Taxon = str_remove(Taxon, '^.* '),
Taxon = if_else(Taxon %in% c('Salix', 'Erigeron'), 'sp.', Taxon)) %>%
select(Genus, Species = Taxon, Percent_Sample, No.Corb, median_percent_corb) %>%
left_join(., fam, by = 'Genus') %>%
select(-Percent_Sample) %>%
relocate(Family, .before = Genus) %>%
filter(No.Corb > 4) %>%
distinct() %>%
arrange(Family, Genus)  %>%
knitr::kable(
escape = F,
align = c('l', 'l', 'l', 'c', 'c'),
caption = 'Plant species detected in five or more corbiculae loads',
col.names = c('Family', 'Genus', 'Species', 'No. Samples', 'Mean Prop.\\textsuperscript{a}')
) %>%
collapse_rows() %>%
add_footnote(
'The mean only calculated across the samples where the species was detected')
270/60
pol_p <- pollen_props %>%
mutate(sequenceProp = sequenceProp/100,
adjSeqProp = sequenceProp * (100/Prcnt_Seqs_Class))
ct <-cor.test(pol_p$countProp, pol_p$adjSeqProp, method = "kendall")
# ct[["p.value"]] #too small to write out. tau > 0.4 strong relationship
model <-  lm(adjSeqProp ~ countProp, data = pol_p)
# png('../../thesis_talk/graphics/plots/CorrelationCountedSequences.png', )
par(pty="s")
plot(x = pol_p$countProp,  pol_p$adjSeqProp,
xlim = c(0,1), ylim = c(0,1), axes = F, main = 'Correlation of Proportion Counted\nGrains and Sequence Reads',
xlab = 'Grains Counted', ylab = 'Classified Sequences',
pch=18, slty = 3, gap = 0.025)
axis(1)
axis(2)
abline(model)
text(0.3, 0.9, paste0("tau = ", round(ct[["estimate"]][["tau"]], 3)))
text(0.3, 0.8, "p < 0.001")
# dev.off()
# rm( newdat)
